_____              __ _                            _                          ______  ___   _____ _____ _____ _____ _____
/  __ \            / _(_)                          (_)                         | ___ \/ _ \ /  ___|_   _/  __ \  _  /  ___|
| /  \/ ___  _ __ | |_ _  __ _ _   _ _ __ __ _  ___ _  ___  _ __      _   _    | |_/ / /_\ \\ `--.  | | | /  \/ | | \ `--.
| |    / _ \| '_ \|  _| |/ _` | | | | '__/ _` |/ __| |/ _ \| '_ \    | | | |   | ___ \  _  | `--. \ | | | |   | | | |`--. \
| \__/\ (_) | | | | | | | (_| | |_| | | | (_| | (__| | (_) | | | |   | |_| |   | |_/ / | | |/\__/ /_| |_| \__/\ \_/ /\__/ /
\____/\___/|_| |_|_| |_|\__, |\__,_|_|  \__,_|\___|_|\___/|_| |_|    \__, |   \____/\_| |_/\____/ \___/ \____/\___/\____/
                         __/ |                                        __/ |
                        |___/                                        |___/

# CMDs para configuración

git config --global user.name "Juan R Nouche"
git config --global user.email "juan.nouche@gmail.com"
# con esto configuramos nuestro usuario

git add --help
# obtener ayuda de cualquier comando (por ejemplo add)

git init
# inicializa el directorio del proyecto local para trabajar con git

git status
# comprueba el status de los commits

#Para excluir ficheros del commit debemos crear el fichero .gitignore
#dentro de este fihero van los nombres de fichero directorios o tipos de datos a exlcuir (Ejemplo *.pyc exluye del commit todos los fichero pyc)

STAGING AREA: es una zona intermedia donde quedan los ficheros antes de hacer el final commits. Primero se marcan ahí y una vez que estamos
seguros de lo que queremos enviar se hace el commits

git add

# se añaden ficheros al staging AREA
# solo se añaden los ficheros que no estén dentro de gitignore
# por ejemplo:

git add mifichero.xxx  #si funcionaria salvo que mifichero.xxx estuviese incluido en .gitignore

git add -A  #añade todo lo que no esté en .gitignore al commit

git reset #contrario de add quita ficheros del commit

git reset mifichero.xxx #quita del staging a mifichero.xxx

git reset   #elimina todos los ficheros del staging

# podemos si estan bien o mal con git status


_____ _   _ _   _ _____  ___  ______       ______ ___________ _____
|  ___| \ | | | | |_   _|/ _ \ | ___ \      | ___ \  ___| ___ \  _  |
| |__ |  \| | | | | | | / /_\ \| |_/ /      | |_/ / |__ | |_/ / | | |
|  __|| . ` | | | | | | |  _  ||    /       |    /|  __||  __/| | | |
| |___| |\  \ \_/ /_| |_| | | || |\ \       | |\ \| |___| |   \ \_/ /
\____/\_| \_/\___/ \___/\_| |_/\_| \_|      \_| \_\____/\_|    \___/

# CMDs para empezar un proyecto
# Opción 1: Proyecto existente en carpeta local pasarlo a github

# primer commit

git add -A #añadimos todo lo que no esté en .gitignore
git status  #comprobamos si es correcto
git commit -m "primer commit o algo así" #Prepara el commit

git remote add origin https://github.com/aliencow/flask_pymongo.git
#crear el remote en github desde nuestro usuario previamente github nos da el link para
#añadir el origin

git push -u origin master #envia y crea un proyecto en github
#nos va a pedir nuestro usuario y pass en github


_____  _     _____ _   _   ___  ______       ______ ___________ _____
/  __ \| |   |  _  | \ | | / _ \ | ___ \      | ___ \  ___| ___ \  _  |
| /  \/| |   | | | |  \| |/ /_\ \| |_/ /      | |_/ / |__ | |_/ / | | |
| |    | |   | | | | . ` ||  _  ||    /       |    /|  __||  __/| | | |
| \__/\| |___\ \_/ / |\  || | | || |\ \       | |\ \| |___| |   \ \_/ /
\____/\_____/\___/\_| \_/\_| |_/\_| \_|      \_| \_\____/\_|    \___/


# CMDs para empezar un proyecto
# Opción 2: Proyecto existente en github que se clona en carpeta local

# Primero obtener la dirección del repo en github ejemplo: https://github.com/aliencow/flask_pymongo.git

# sintaxis para clonar:

git clone <urlgit> <carpeta>

# ejemplo:

git clone https://github.com/aliencow/flask_pymongo.git micarpeta #crea el directorio micarpeta y clona el repositorio

# si creamos primero la carpeta y queremos clonar dentro de ella se pone . en lugar del nombre de la micarpeta
# ejemplo:

cd micarpeta
git clone https://github.com/aliencow/flask_pymongo.git .

# clonaria dendro de mi carpeta sin crearla


git remote -v
# para ver el status del remoto

git branch -a
# para ver la rama en la que estamos


  ___  _____ _____ _   _  ___   _     _____ ______  ___  _____ _____ _____ _   _  _____ _____   ______ ___________ _____
 / _ \/  __ \_   _| | | |/ _ \ | |   |_   _|___  / / _ \/  __ \_   _|  _  | \ | ||  ___/  ___|  | ___ \  ___| ___ \  _  |
/ /_\ \ /  \/ | | | | | / /_\ \| |     | |    / / / /_\ \ /  \/ | | | | | |  \| || |__ \ `--.   | |_/ / |__ | |_/ / | | |
|  _  | |     | | | | | |  _  || |     | |   / /  |  _  | |     | | | | | | . ` ||  __| `--. \  |    /|  __||  __/| | | |
| | | | \__/\ | | | |_| | | | || |_____| |_./ /___| | | | \__/\_| |_\ \_/ / |\  || |___/\__/ /  | |\ \| |___| |   \ \_/ /
\_| |_/\____/ \_/  \___/\_| |_/\_____/\___/\_____/\_| |_/\____/\___/ \___/\_| \_/\____/\____/   \_| \_\____/\_|    \___/

git diff
# podemos ver los cambios en el código que no ha sido realizado en commit

git add -A
# una vez actualizados los campos añadimos todo al commit y...

git commit -m "los cambios que sean"
# ... preparar el commit que sea

git pull origin master
# Hacemos un pull previo por si alguien ha hecho cambios que no tenemos

git push origin master
# Finalmente hacemos el push para subir nuestros cambios
